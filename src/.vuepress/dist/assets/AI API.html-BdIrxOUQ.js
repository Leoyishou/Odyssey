import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,b as i,d as s,e,f as o,r as a,o as u}from"./app-DyPYfXuN.js";const p={};function g(A,l){const n=a("RouteLink");return u(),r("div",null,[l[49]||(l[49]=t("h2",{id:"openai",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#openai"},[t("span",null,"OpenAI")])],-1)),l[50]||(l[50]=t("p",null,[t("a",{href:"https://platform.openai.com/docs/assistants/how-it-works",target:"_blank",rel:"noopener noreferrer"},"How Assistants work - OpenAI API")],-1)),t("table",null,[l[48]||(l[48]=t("thead",null,[t("tr",null,[t("th",null,"主分类"),t("th",null,"子项目"),t("th")])],-1)),t("tbody",null,[l[7]||(l[7]=t("tr",null,[t("td",null,"Get started"),t("td",null,"Overview"),t("td")],-1)),l[8]||(l[8]=t("tr",null,[t("td"),t("td",null,"Quickstart"),t("td")],-1)),l[9]||(l[9]=t("tr",null,[t("td"),t("td",null,"Models"),t("td")],-1)),l[10]||(l[10]=t("tr",null,[t("td"),t("td",null,"Changelog"),t("td")],-1)),l[11]||(l[11]=t("tr",null,[t("td"),t("td",null,"Terms and policies"),t("td")],-1)),l[12]||(l[12]=t("tr",null,[t("td",null,"Capabilities"),t("td",null,"Text generation"),t("td")],-1)),l[13]||(l[13]=t("tr",null,[t("td"),t("td",null,"Image generation"),t("td")],-1)),l[14]||(l[14]=t("tr",null,[t("td"),t("td",null,"Vision"),t("td")],-1)),l[15]||(l[15]=t("tr",null,[t("td"),t("td",null,"Audio generation"),t("td")],-1)),l[16]||(l[16]=t("tr",null,[t("td"),t("td",null,"Text to speech"),t("td")],-1)),l[17]||(l[17]=t("tr",null,[t("td"),t("td",null,"Speech to text"),t("td")],-1)),l[18]||(l[18]=t("tr",null,[t("td"),t("td",null,"Vector embeddings"),t("td")],-1)),l[19]||(l[19]=t("tr",null,[t("td"),t("td",null,"Moderation"),t("td")],-1)),l[20]||(l[20]=t("tr",null,[t("td"),t("td",null,"Reasoning"),t("td")],-1)),l[21]||(l[21]=t("tr",null,[t("td",null,"Guides"),t("td",null,"Function calling"),t("td",null,"让 AI 生成入参调本地函数")],-1)),t("tr",null,[l[2]||(l[2]=t("td",null,null,-1)),l[3]||(l[3]=t("td",null,"Structured outputs",-1)),t("td",null,[l[1]||(l[1]=i("借助 ")),s(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/API/Pydantic.html"},{default:e(()=>l[0]||(l[0]=[i("Pydantic")])),_:1})])]),l[22]||(l[22]=t("tr",null,[t("td"),t("td",null,"Evaluations"),t("td")],-1)),l[23]||(l[23]=t("tr",null,[t("td"),t("td",null,"Fine-tuning"),t("td",null,"使用您的数据将模型适应您的特定用例")],-1)),l[24]||(l[24]=t("tr",null,[t("td"),t("td",null,"Distillation"),t("td",null,"使用生产日志评估和微调模型")],-1)),l[25]||(l[25]=t("tr",null,[t("td"),t("td",null,"Realtime API"),t("td",null,"原生语音转语音而不是TTS")],-1)),l[26]||(l[26]=t("tr",null,[t("td"),t("td",null,"Batch API"),t("td",null,"批处理，适合那种一两个小时内不需要结果的任务，放在 openai 那里慢慢做，收费比正常接口低")],-1)),l[27]||(l[27]=t("tr",null,[t("td",null,"Assistants"),t("td",null,"Overview"),t("td",null,[i("助手可以并行访问"),t("strong",null,"多种工具"),i("。这些可以是 OpenAI 托管的工具——像"),t("a",{href:"https://platform.openai.com/docs/assistants/tools/code-interpreter",target:"_blank",rel:"noopener noreferrer"},"代码解释器"),i("和"),t("a",{href:"https://platform.openai.com/docs/assistants/tools/file-search",target:"_blank",rel:"noopener noreferrer"},"文件搜索"),i(" ——或者您构建/托管的工具(通过"),t("a",{href:"https://platform.openai.com/docs/assistants/tools/function-calling",target:"_blank",rel:"noopener noreferrer"},"函数调用"),i(")。相当于是 OpenAI 的函数+本地函数，其实就是我之前做的 viva")])],-1)),l[28]||(l[28]=t("tr",null,[t("td"),t("td",null,"Quickstart"),t("td")],-1)),l[29]||(l[29]=t("tr",null,[t("td"),t("td",null,"Deep dive"),t("td")],-1)),l[30]||(l[30]=t("tr",null,[t("td"),t("td",null,"Tools"),t("td")],-1)),l[31]||(l[31]=t("tr",null,[t("td"),t("td",null,"What's new?"),t("td")],-1)),l[32]||(l[32]=t("tr",null,[t("td"),t("td",null,"Migration guide"),t("td")],-1)),l[33]||(l[33]=t("tr",null,[t("td",null,"ChatGPT"),t("td",null,"Actions"),t("td")],-1)),l[34]||(l[34]=t("tr",null,[t("td"),t("td",null,"Release notes"),t("td")],-1)),t("tr",null,[l[5]||(l[5]=t("td",null,"Best practices",-1)),t("td",null,[s(n,{to:"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/API/Prompt.html"},{default:e(()=>l[4]||(l[4]=[i("Prompt")])),_:1})]),l[6]||(l[6]=t("td",null,null,-1))]),l[35]||(l[35]=t("tr",null,[t("td"),t("td",null,"Production best practices"),t("td")],-1)),l[36]||(l[36]=t("tr",null,[t("td"),t("td",null,"Safety best practices"),t("td")],-1)),l[37]||(l[37]=t("tr",null,[t("td"),t("td",null,"Prompt caching"),t("td",null,"Openai 侧的缓存，降低成本")],-1)),l[38]||(l[38]=t("tr",null,[t("td"),t("td",null,"Model selection"),t("td")],-1)),l[39]||(l[39]=t("tr",null,[t("td"),t("td",null,"Latency optimization"),t("td")],-1)),l[40]||(l[40]=t("tr",null,[t("td"),t("td",null,"Accuracy optimization"),t("td")],-1)),l[41]||(l[41]=t("tr",null,[t("td"),t("td",null,"Advanced usage"),t("td")],-1)),l[42]||(l[42]=t("tr",null,[t("td",null,"Resources"),t("td",null,"Libraries"),t("td")],-1)),l[43]||(l[43]=t("tr",null,[t("td"),t("td",null,"Prompt examples"),t("td")],-1)),l[44]||(l[44]=t("tr",null,[t("td"),t("td",null,"Rate limits"),t("td")],-1)),l[45]||(l[45]=t("tr",null,[t("td"),t("td",null,"Prompt generation"),t("td")],-1)),l[46]||(l[46]=t("tr",null,[t("td"),t("td",null,"Error codes"),t("td")],-1)),l[47]||(l[47]=t("tr",null,[t("td"),t("td",null,"Deprecations"),t("td")],-1))])]),l[51]||(l[51]=o(`<h3 id="限流" tabindex="-1"><a class="header-anchor" href="#限流"><span>限流</span></a></h3><figure><img src="https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F27%2F04-27-30-a4b9a2b46b404be9adbfdd83d2876a2f-202410270427685-ad1693.png" alt="image.png|1000" tabindex="0" loading="lazy"><figcaption>image.png|1000</figcaption></figure><h3 id="结果约束" tabindex="-1"><a class="header-anchor" href="#结果约束"><span>结果约束</span></a></h3><p>JSON mode和Structured Outputs的主要区别在于：</p><ol><li>JSON mode（基础版）:</li></ol><ul><li>只确保输出是有效的JSON格式</li><li>不保证输出符合任何特定的数据结构</li><li>没有数据验证和类型检查</li><li>你需要自己处理数据验证和错误情况</li></ul><ol><li>Structured Outputs（进阶版）:</li></ol><ul><li>不仅确保输出是有效的JSON格式</li><li>还能确保输出严格匹配你指定的schema（数据结构）</li><li>提供了完整的数据验证功能</li><li>支持复杂的数据类型定义和嵌套结构</li><li>自动进行类型检查和验证</li></ul><p>举个例子来说： 假设你想要获取一个用户的信息：</p><p>使用JSON mode时，模型可能返回：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;25岁&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 注意这里age是字符串</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用Structured Outputs时，如果你定义了schema要求age必须是数字类型：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 这里一定是数字类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以Structured Outputs提供了更严格的数据控制，让你的应用程序能够更可靠地处理模型输出。这也是为什么在可能的情况下，建议使用Structured Outputs而不是基础的JSON mode。</p><h2 id="anthropic" tabindex="-1"><a class="header-anchor" href="#anthropic"><span>Anthropic</span></a></h2><p><strong>project knowledge</strong> 还没有提供 API</p>`,16))])}const h=d(p,[["render",g],["__file","AI API.html.vue"]]),b=JSON.parse('{"path":"/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/API/AI%20API.html","title":"","lang":"zh-CN","frontmatter":{"description":"OpenAI How Assistants work - OpenAI API 限流 image.png|1000image.png|1000 结果约束 JSON mode和Structured Outputs的主要区别在于： JSON mode（基础版）: 只确保输出是有效的JSON格式 不保证输出符合任何特定的数据结构 没有数据验证和类型检查 你需...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/2%20%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/1%20%E8%8A%82%E7%82%B9/CS/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AIGC/API/AI%20API.html"}],["meta",{"property":"og:site_name","content":"转了码的刘公子"}],["meta",{"property":"og:description","content":"OpenAI How Assistants work - OpenAI API 限流 image.png|1000image.png|1000 结果约束 JSON mode和Structured Outputs的主要区别在于： JSON mode（基础版）: 只确保输出是有效的JSON格式 不保证输出符合任何特定的数据结构 没有数据验证和类型检查 你需..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F27%2F04-27-30-a4b9a2b46b404be9adbfdd83d2876a2f-202410270427685-ad1693.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T16:17:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T16:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://imagehosting4picgo.oss-cn-beijing.aliyuncs.com/imagehosting/fix-dir%2Fpicgo%2Fpicgo-clipboard-images%2F2024%2F10%2F27%2F04-27-30-a4b9a2b46b404be9adbfdd83d2876a2f-202410270427685-ad1693.png\\"],\\"dateModified\\":\\"2024-11-24T16:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"转了码的刘公子\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"OpenAI","slug":"openai","link":"#openai","children":[{"level":3,"title":"限流","slug":"限流","link":"#限流","children":[]},{"level":3,"title":"结果约束","slug":"结果约束","link":"#结果约束","children":[]}]},{"level":2,"title":"Anthropic","slug":"anthropic","link":"#anthropic","children":[]}],"git":{"createdTime":1732465042000,"updatedTime":1732465042000,"contributors":[{"name":"Luis","email":"liuysh20@gmail.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"2 第二大脑/1 节点/CS/人工智能/AIGC/API/AI API.md","localizedDate":"2024年11月25日","autoDesc":true}');export{h as comp,b as data};
